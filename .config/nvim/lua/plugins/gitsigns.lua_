-- SPDX-License-Identifier: MIT
local M = {}

function M.setup()
  local ok, gitsigns = pcall(require, "gitsigns")
  if not ok then return end

  local map = vim.keymap.set

  -- Navigation between hunks
  map('n', ']c', function()
    if vim.wo.diff then
      vim.cmd.normal({ ']c', bang = true })
    else
      gitsigns.nav_hunk('next')
    end
  end, { desc = 'Git: Next hunk' })

  map('n', '[c', function()
    if vim.wo.diff then
      vim.cmd.normal({ '[c', bang = true })
    else
      gitsigns.nav_hunk('prev')
    end
  end, { desc = 'Git: Previous hunk' })

  -- Navigation with preview (keep focus in source window)
  map('n', ']h', function()
    if vim.wo.diff then
      vim.cmd.normal({ ']c', bang = true })
    else
      local cur_win = vim.api.nvim_get_current_win()
      gitsigns.nav_hunk('next')
      gitsigns.preview_hunk()
      -- restore focus to source
      if cur_win and vim.api.nvim_win_is_valid(cur_win) then
        vim.api.nvim_set_current_win(cur_win)
      end
    end
  end, { desc = 'Git: Next hunk (preview, keep focus)' })

  map('n', '[h', function()
    if vim.wo.diff then
      vim.cmd.normal({ '[c', bang = true })
    else
      local cur_win = vim.api.nvim_get_current_win()
      gitsigns.nav_hunk('prev')
      gitsigns.preview_hunk()
      if cur_win and vim.api.nvim_win_is_valid(cur_win) then
        vim.api.nvim_set_current_win(cur_win)
      end
    end
  end, { desc = 'Git: Previous hunk (preview, keep focus)' })

  -- Actions
  map('n', '<leader>ghs', gitsigns.stage_hunk, { desc = 'GitSigns: Stage hunk' })
  map('n', '<leader>ghr', gitsigns.reset_hunk, { desc = 'GitSigns: Reset hunk' })

  map('v', '<leader>ghs', function()
    gitsigns.stage_hunk({ vim.fn.line('.'), vim.fn.line('v') })
  end, { desc = 'GitSigns: Stage selected hunk' })

  map('v', '<leader>ghr', function()
    gitsigns.reset_hunk({ vim.fn.line('.'), vim.fn.line('v') })
  end, { desc = 'GitSigns: Reset selected hunk' })

  map('n', '<leader>ghS', gitsigns.stage_buffer, { desc = 'GitSigns: Stage buffer' })
  map('n', '<leader>ghR', gitsigns.reset_buffer, { desc = 'GitSigns: Reset buffer' })
  map('n', '<leader>ghp', gitsigns.preview_hunk, { desc = 'GitSigns: Preview hunk' })
  map('n', '<leader>ghi', gitsigns.preview_hunk_inline, { desc = 'GitSigns: Inline preview hunk' })

  map('n', '<leader>ghb', function()
    gitsigns.blame_line({ full = true })
  end, { desc = 'GitSigns: Blame line (full)' })

  map('n', '<leader>ghd', gitsigns.diffthis, { desc = 'GitSigns: Diff against index' })
  map('n', '<leader>ghD', function()
    gitsigns.diffthis('~')
  end, { desc = 'GitSigns: Diff against previous commit' })

  map('n', '<leader>ghQ', function() gitsigns.setqflist('all') end, { desc = 'GitSigns: Populate QF (all hunks)' })
  map('n', '<leader>ghq', gitsigns.setqflist, { desc = 'GitSigns: Populate QF (current hunks)' })

  -- Toggles
  map('n', '<leader>gtb', gitsigns.toggle_current_line_blame, { desc = 'GitSigns: Toggle line blame' })
  map('n', '<leader>gtw', gitsigns.toggle_word_diff, { desc = 'GitSigns: Toggle word diff' })

  -- Text object
  map({ 'o', 'x' }, 'ih', gitsigns.select_hunk, { desc = 'GitSigns: Select hunk' })

  gitsigns.setup()
end

return M
