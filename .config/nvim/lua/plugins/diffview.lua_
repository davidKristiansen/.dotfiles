-- lua/plugins/diffview.lua
-- SPDX-License-Identifier: MIT
local M = {}

local opts = {
  enhanced_diff_hl = true,
  view = {
    default = { layout = "diff2_horizontal" }, -- open with HEAD..REMOTE â†’ LEFT=local, RIGHT=remote
    merge_tool = {
      layout = "diff3_horizontal",             -- ours | base | theirs  (L | M | R)
      disable_diagnostics = true,
    },
  },
  keymaps = {
    disable_defaults = true, -- ditch built-ins so our LEFT/RIGHT brain wins
    -- Use the *list* form: { mode, lhs, rhs_fn, { desc = "..." } }
    view = (function()
      local a = require("diffview.actions")
      return {
        -- Conflict resolution (under <leader>gC...)
        { "n", "<leader>gCl", a.conflict_choose("ours"),   { desc = "Git Diffview: choose LEFT (ours)" } },
        { "n", "<leader>gCr", a.conflict_choose("theirs"), { desc = "Git Diffview: choose RIGHT (theirs)" } },
        { "n", "<leader>gCm", a.conflict_choose("base"),   { desc = "Git Diffview: choose BASE (middle)" } },
        { "n", "<leader>gCa", a.conflict_choose("all"),    { desc = "Git Diffview: choose ALL" } },

        -- General navigation (keep single-letter where intuitive)
        { "n", "q",           a.close,                     { desc = "Git Diffview: close" } },
        { "n", "]h",          a.select_next_entry,         { desc = "Git Diffview: next entry" } },
        { "n", "[h",          a.select_prev_entry,         { desc = "Git Diffview: previous entry" } },
        { "n", "gr",          a.refresh_files,             { desc = "Git Diffview: refresh files" } },
        { "n", "gf",          a.goto_file_edit,            { desc = "Git Diffview: open file in editor" } },
        { "n", "<leader>gft", a.focus_files,               { desc = "Git Diffview: focus files panel" } },
      }
    end)(),
    file_panel = (function()
      local a = require("diffview.actions")
      return {
        { "n", "q",       a.close,         { desc = "Close panel" } },
        { "n", "<tab>",   a.focus_entry,   { desc = "Focus entry" } },
        { "n", "<S-tab>", a.toggle_files,  { desc = "Toggle files panel" } },
        { "n", "gr",      a.refresh_files, { desc = "Refresh files" } },
      }
    end)(),
    file_history_panel = (function()
      local a = require("diffview.actions")
      return {
        { "n", "q",     a.close,            { desc = "Close history panel" } },
        { "n", "<tab>", a.open_in_diffview, { desc = "Open in diffview" } },
        { "n", "gr",    a.refresh_files,    { desc = "Refresh history" } },
      }
    end)(),
  },
}

function M.setup()
  local ok, diff = pcall(require, "diffview")
  if not ok then return end
  diff.setup(opts)

  -- Openers that guarantee LEFT=local, RIGHT=remote (HEAD..REMOTE)
  -- All Git/Diffview keymaps under <leader>g
  vim.keymap.set("n", "<leader>gu", function()
    vim.cmd("DiffviewOpen HEAD..@{u}")
  end, { silent = true, desc = "Git Diffview: local vs upstream" })

  vim.keymap.set("n", "<leader>gm", function()
    vim.cmd("DiffviewOpen HEAD..origin/main")
  end, { silent = true, desc = "Git Diffview: local vs origin/main" })

  vim.keymap.set("n", "<leader>gf", ":DiffviewFileHistory %<CR>",
    { silent = true, desc = "Git Diffview: file history (current file)" })

  vim.keymap.set("n", "<leader>go", function()
    local sha = vim.fn.expand("<cword>")
    if sha:match("^[0-9a-fA-F]+$") then
      vim.cmd(("DiffviewOpen %s^!"):format(sha))
    else
      vim.notify("No commit hash under cursor", vim.log.levels.WARN)
    end
  end, { silent = true, desc = "Git Diffview: open diff for commit under cursor" })
end

return M
