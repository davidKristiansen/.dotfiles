return {
  -- {
  --   "olimorris/codecompanion.nvim",
  --   cmd = { "CodeCompanionChat" },
  --   dependencies = {
  --     "nvim-lua/plenary.nvim",
  --     "nvim-treesitter/nvim-treesitter",
  --     {
  --       "ravitemer/mcphub.nvim", -- Manage MCP servers
  --       cmd = "MCPHub",
  --       build = "npm install -g mcp-hub@latest",
  --       config = true,
  --     },
  --   },
  --   opts = {
  --     extensions = {
  --       mcphub = {
  --         callback = "mcphub.extensions.codecompanion",
  --         opts = {
  --           make_vars = true,
  --           make_slash_commands = true,
  --           show_result_in_chat = true,
  --         },
  --       },
  --     },
  --     display = { chat = { show_settings = true } },
  --     strategies = {
  --       chat = { adapter = "openai" },
  --       inline = {
  --         -- adapter = "gemini",
  --         keymaps = {
  --           accept_change = {
  --             modes = { n = "<leader>aa" },
  --             description = "Accept the suggested change",
  --           },
  --           reject_change = {
  --             modes = { n = "<leader>aA" },
  --             description = "Reject the suggested change",
  --           },
  --         },
  --       },
  --     },
  --     adapters = {
  --       anthropic = function()
  --         return require("codecompanion.adapters").extend("anthropic", {
  --           schema = {
  --             model = {
  --               default = function()
  --                 return "claude-3-7-sonnet-latest"
  --               end
  --             }
  --           }
  --         })
  --       end,
  --       gemini = function()
  --         return require("codecompanion.adapters").extend("gemini", {
  --           schema = {
  --             model = {
  --               default = function()
  --                 return "gemini-2.5-pro-exp-03-25"
  --               end
  --             }
  --           }
  --         })
  --       end,
  --       openai = function()
  --         return require("codecompanion.adapters").extend("openai", {
  --           schema = {
  --             model = {
  --               default = function()
  --                 return "gpt-4.1-mini"
  --               end,
  --             },
  --           },
  --         })
  --       end,
  --     },
  --   },
  --   keys = {
  --     { "<leader>ac", "<cmd>CodeCompanionChat toggle<cr>", desc = "Toggle Chat" },
  --     { "<leader>ar", "<cmd>CodeCompanionReview<cr>",      desc = "Review" },
  --     { "<leader>af", "<cmd>CodeCompanionActions<cr>",     desc = "Actions" },
  --     { "<leader>aw", "<cmd>CodeCompanionWorkspace<CR>",   desc = "Workspaces" },
  --   },
  -- },
}
